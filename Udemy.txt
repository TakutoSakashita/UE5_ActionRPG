・ハード参照よくない メインメニューでキャストしたものはずっと保持されてしまう→ロード時間が長くなる

・ソフト参照を使う TSofrObjectPtr<OO*> これの場合は手動でロードする必要がある→Async Load Asset
コードの複雑化などが起きる。実行タイミングの管理。読み込むには数フレームかかる

どちらも長所と短所があるので使い分け

・重度の高いものはハード参照、低いものはソフト参照にする。

・TObjectPtrはパフォーマンスには影響がない
--
・従来のインプットアクション→小規模のプロジェクトなら最適
だが実際は入力めちゃくちゃある

・GameplayTagこれを入力として定義する
入力に必要なタグができたら入力データアセットを作成する

このデータアセットから独自の入力アクションにマッピングする

・Native GamePlay Tag → Input Confing Data Asset 
→ Custom Input Component → Binding Inputs(キャラクタークラスなどに配置可能) → Assign assets in editor 

・APIを先頭につけるとほかのモジュールからアクセスできるようになる

--Native GamePlay Tag --
UE_DECLARE_GAMEPLAY_TAG_EXTERN(InputTag_Move）
UE_DEFINE_GAMEPLAY_TAG(InputTag_Move,"InputTag.Move"）
一つ目はC++で使用できる変数、二つ目はエディターで表示される名前

-- Input Config Data Asset --
meta=(CateGories = "Input Tag"))
ここではInputTagから始まるタグのみ選択できるようになる